# Makefile.in generated by automake 1.10.1 from Makefile.am.
# src/apps/load_an_elf/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



VPATH = ../../../../../src/apps/load_an_elf
pkgdatadir = $(datadir)/mos
pkglibdir = $(libdir)/mos
pkgincludedir = $(includedir)/mos
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
DIST_COMMON = README $(srcdir)/../../Makefile.am.inc \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in
#am__append_1 = $(top_builddir)/src/mos/kernel/avr/lib_kernel.a   \
#		 $(top_builddir)/src/mos/kernel/micro/lib_kernel_generic.a

#am__append_2 = -I$(top_srcdir)/src/mos/kernel/avr/include \
#            -I$(top_srcdir)/src/mos/kernel/avr/boot/include

am__append_3 = $(top_builddir)/src/mos/kernel/micro/lib_kernel_generic.a \
		$(top_builddir)/src/mos/kernel/msp430/lib_kernel.a

am__append_4 = -I$(top_srcdir)/src/mos/kernel/msp430/include
#am__append_5 = $(top_builddir)/src/mos/kernel/micro/lib_kernel_generic.a \
#	$(top_builddir)/src/mos/kernel/microblaze/lib_kernel.a \
#	$(nodeblaze_dir)/microblaze_0/lib/libc.a \
#	$(nodeblaze_dir)/microblaze_0/lib/libxil.a
#am__append_6 = -I$(top_srcdir)/src/mos/kernel/microblaze/include \
#	-I$(nodeblaze_dir)/microblaze_0/include
noinst_PROGRAMS = $(am__EXEEXT_1)
subdir = src/apps/load_an_elf
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__EXEEXT_1 =  \
	load_static.elf$(EXEEXT) \
	load_net.elf$(EXEEXT)
#am__EXEEXT_1 = load_static.elf$(EXEEXT) \
#	load_net.elf$(EXEEXT) \
#	send_static.elf$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
am__load_net_elf_SOURCES_DIST = symbols.c remake_com.c load_net.c \
	loader/elfloader.c loader/elfloader-x86.c loader/symtab.c \
	elfstore/elfstore-ram.c loader/elfloader-msp430.c dev/flash.c
am_load_net_elf_OBJECTS =  \
	symbols.$(OBJEXT) \
	remake_com.$(OBJEXT) \
	load_net.$(OBJEXT) \
	elfloader.$(OBJEXT) \
	elfloader-msp430.$(OBJEXT) \
	symtab.$(OBJEXT) \
	elfstore-ram.$(OBJEXT) \
	flash.$(OBJEXT)
#am_load_net_elf_OBJECTS = symbols.$(OBJEXT) \
#	remake_com.$(OBJEXT) load_net.$(OBJEXT) \
#	elfloader.$(OBJEXT) elfloader-x86.$(OBJEXT) \
#	symtab.$(OBJEXT) elfstore-ram.$(OBJEXT)
load_net_elf_OBJECTS = $(am_load_net_elf_OBJECTS)
load_net_elf_LDADD = $(LDADD)
am__DEPENDENCIES_1 =
am__DEPENDENCIES_2 = $(top_builddir)/src/mos/sys/lib_sys.a \
	$(top_builddir)/src/mos/dev/lib_dev.a \
	$(top_builddir)/src/mos/com/lib_com.a \
	$(top_builddir)/src/mos/kernel/linux/lib_kernel.a \
	$(top_builddir)/src/mos/share/lib_share.a \
	$(top_builddir)/src/lib/lib.a $(am__DEPENDENCIES_1)
am__DEPENDENCIES_3 = $(top_builddir)/src/mos/sys/lib_sys.a \
	$(top_builddir)/src/mos/com/lib_com.a \
	$(top_builddir)/src/mos/dev/lib_dev.a \
	$(top_builddir)/src/mos/net/lib_net.a \
	$(top_builddir)/src/mos/com/lib_com.a \
	$(top_builddir)/src/mos/dev/lib_dev.a \
	$(top_builddir)/src/lib/lib.a \
	$(top_builddir)/src/mos/share/lib_share.a \
	$(top_builddir)/src/mos/com/lib_com.a \
	$(top_builddir)/src/mos/dev/lib_dev.a \
	$(top_builddir)/src/lib/lib.a
#am__DEPENDENCIES_4 = $(am__DEPENDENCIES_2)
am__DEPENDENCIES_4 = $(am__DEPENDENCIES_3) \
	$(am__append_1) $(am__append_3) \
	$(am__append_5)
load_net_elf_DEPENDENCIES = $(am__DEPENDENCIES_4)
am__load_static_elf_SOURCES_DIST = symbols.c prog2load_buf.c \
	load_static.c loader/elfloader.c loader/elfloader-x86.c \
	loader/symtab.c elfstore/elfstore-ram.c \
	loader/elfloader-msp430.c dev/flash.c
am_load_static_elf_OBJECTS =  \
	symbols.$(OBJEXT) \
	prog2load_buf.$(OBJEXT) \
	load_static.$(OBJEXT) \
	elfloader.$(OBJEXT) \
	elfloader-msp430.$(OBJEXT) \
	symtab.$(OBJEXT) \
	elfstore-ram.$(OBJEXT) \
	flash.$(OBJEXT)
#am_load_static_elf_OBJECTS = symbols.$(OBJEXT) \
#	prog2load_buf.$(OBJEXT) load_static.$(OBJEXT) \
#	elfloader.$(OBJEXT) elfloader-x86.$(OBJEXT) \
#	symtab.$(OBJEXT) elfstore-ram.$(OBJEXT)
load_static_elf_OBJECTS = $(am_load_static_elf_OBJECTS)
load_static_elf_LDADD = $(LDADD)
load_static_elf_DEPENDENCIES = $(am__DEPENDENCIES_4)
am__send_static_elf_SOURCES_DIST = symbols.c prog2load_buf.c \
	send_static.c loader/elfloader.c loader/elfloader-x86.c \
	loader/symtab.c elfstore/elfstore-ram.c \
	loader/elfloader-msp430.c dev/flash.c
am_send_static_elf_OBJECTS =  \
	symbols.$(OBJEXT) \
	prog2load_buf.$(OBJEXT) \
	send_static.$(OBJEXT) \
	elfloader.$(OBJEXT) \
	elfloader-msp430.$(OBJEXT) \
	symtab.$(OBJEXT) \
	elfstore-ram.$(OBJEXT) \
	flash.$(OBJEXT)
#am_send_static_elf_OBJECTS = symbols.$(OBJEXT) \
#	prog2load_buf.$(OBJEXT) send_static.$(OBJEXT) \
#	elfloader.$(OBJEXT) elfloader-x86.$(OBJEXT) \
#	symtab.$(OBJEXT) elfstore-ram.$(OBJEXT)
send_static_elf_OBJECTS = $(am_send_static_elf_OBJECTS)
send_static_elf_LDADD = $(LDADD)
send_static_elf_DEPENDENCIES = $(am__DEPENDENCIES_4)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(load_net_elf_SOURCES) $(load_static_elf_SOURCES) \
	$(send_static_elf_SOURCES)
DIST_SOURCES = $(am__load_net_elf_SOURCES_DIST) \
	$(am__load_static_elf_SOURCES_DIST) \
	$(am__send_static_elf_SOURCES_DIST)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/missing --run tar
AUTOCONF = ${SHELL} /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/missing --run autoconf
AUTOHEADER = ${SHELL} /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/missing --run autoheader
AUTOMAKE = ${SHELL} /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/missing --run automake-1.10
AWK = gawk
CC = msp430-gcc
CCAS = msp430-gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = -Wall -Wno-format -Os -g -mmcu=msp430x1611
CCDEPMODE = depmode=gcc3
CFLAGS = -Wall -Wno-format -Os -g -mmcu=msp430x1611
CPP = 
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H -DUSING_ELF
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = 
EXEEXT = 
GREP = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = -mmcu=msp430x1611
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = mos
PACKAGE_BUGREPORT = 
PACKAGE_NAME = mos
PACKAGE_STRING = mos 0.9
PACKAGE_TARNAME = mos
PACKAGE_VERSION = 0.9
PATH_SEPARATOR = :
RANLIB = msp430-ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = msp430-strip
VERSION = 0.9
abs_builddir = /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/build/telosb/src/apps/load_an_elf
abs_srcdir = /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/build/telosb/../../src/apps/load_an_elf
abs_top_builddir = /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/build/telosb
abs_top_srcdir = /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/build/telosb/../..
ac_ct_CC = 
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = msp430
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/iceman/cefriel/dynamiclinker/mantis-1.0-beta/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = ../../../../../src/apps/load_an_elf
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ../../..
top_srcdir = ../../../../..
#BUILT_APPS = load_static.elf load_net.elf send_static.elf
BUILT_APPS = load_static.elf load_net.elf
#load_static_elf_SOURCES = symbols.c prog2load_buf.c load_static.c loader/elfloader.c loader/elfloader-x86.c loader/symtab.c elfstore/elfstore-ram.c
load_static_elf_SOURCES = symbols.c prog2load_buf.c load_static.c loader/elfloader.c loader/elfloader-msp430.c loader/symtab.c elfstore/elfstore-ram.c dev/flash.c
#load_net_elf_SOURCES = symbols.c remake_com.c load_net.c loader/elfloader.c loader/elfloader-x86.c loader/symtab.c elfstore/elfstore-ram.c
load_net_elf_SOURCES = symbols.c remake_com.c load_net.c loader/elfloader.c loader/elfloader-msp430.c loader/symtab.c elfstore/elfstore-ram.c dev/flash.c
#send_static_elf_SOURCES = symbols.c prog2load_buf.c send_static.c loader/elfloader.c loader/elfloader-x86.c loader/symtab.c elfstore/elfstore-ram.c
send_static_elf_SOURCES = symbols.c prog2load_buf.c send_static.c loader/elfloader.c loader/elfloader-msp430.c loader/symtab.c elfstore/elfstore-ram.c dev/flash.c
DEFAULT_LIBS_MICRO = -lgcc $(top_builddir)/src/mos/sys/lib_sys.a \
                     $(top_builddir)/src/mos/com/lib_com.a \
                     $(top_builddir)/src/mos/dev/lib_dev.a \
                     $(top_builddir)/src/mos/net/lib_net.a \
                     $(top_builddir)/src/mos/com/lib_com.a \
                     $(top_builddir)/src/mos/dev/lib_dev.a \
                     $(top_builddir)/src/lib/lib.a \
                     $(top_builddir)/src/mos/share/lib_share.a \
                     $(top_builddir)/src/mos/com/lib_com.a \
                     $(top_builddir)/src/mos/dev/lib_dev.a \
                     $(top_builddir)/src/lib/lib.a

DEFAULT_LIBS_LINUX = $(top_builddir)/src/mos/sys/lib_sys.a \
		     $(top_builddir)/src/mos/dev/lib_dev.a \
	             $(top_builddir)/src/mos/com/lib_com.a \
	             $(top_builddir)/src/mos/kernel/linux/lib_kernel.a \
		     $(top_builddir)/src/mos/share/lib_share.a \
	             $(top_builddir)/src/lib/lib.a $(EXTRA_LIBS)

LDADD = $(DEFAULT_LIBS)
#DEFAULT_LIBS = $(DEFAULT_LIBS_LINUX)
DEFAULT_LIBS = $(DEFAULT_LIBS_MICRO) $(am__append_1) \
	$(am__append_3) $(am__append_5)
#INCLUDES = \
#  -I$(top_srcdir)/src/mos/kernel/linux/include \
#  -I$(top_srcdir)/src/mos/dev/include \
#  -I$(top_srcdir)/src/mos/sys/include \
#  -I$(top_srcdir)/src/mos/kernel/include \
#  -I$(top_srcdir)/src/lib/include \
#  -I$(top_srcdir)/src/mos/com/include \
#  -I$(top_srcdir)/src/mos/share/include \
#  -I$(top_srcdir)/src/mos/net/include \
#  -I$(top_srcdir)/src/apps/bionet/cortex/include

INCLUDES =  \
	-I$(top_srcdir)/src/mos/kernel/micro/include \
	-I$(top_srcdir)/src/mos/dev/include \
	-I$(top_srcdir)/src/mos/sys/include \
	-I$(top_srcdir)/src/mos/kernel/include \
	-I$(top_srcdir)/src/mos/net/include \
	-I$(top_srcdir)/src/mos/com/include \
	-I$(top_srcdir)/src/lib/include \
	-I$(top_srcdir)/src/mos/share/include \
	$(am__append_2) $(am__append_4) \
	$(am__append_6)
#app_dir = $(PWD)
#nodeblaze_dir = $(top_srcdir)/../nodeblaze
#platlib_dir = /home/charles/src/lib_rev_1_1
#AM_LDFLAGS = -Wl,-T -Wl,$(nodeblaze_dir)/NodeBlaze_linker_script.ld 
#THIS_ELF = $(firstword $(BUILT_APPS))
#EXTRA_LIBS = -lpthread
all: all-am

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(srcdir)/../../Makefile.am.inc $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/apps/load_an_elf/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/apps/load_an_elf/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
load_net.elf$(EXEEXT): $(load_net_elf_OBJECTS) $(load_net_elf_DEPENDENCIES) 
	@rm -f load_net.elf$(EXEEXT)
	$(LINK) $(load_net_elf_OBJECTS) $(load_net_elf_LDADD) $(LIBS)
load_static.elf$(EXEEXT): $(load_static_elf_OBJECTS) $(load_static_elf_DEPENDENCIES) 
	@rm -f load_static.elf$(EXEEXT)
	$(LINK) $(load_static_elf_OBJECTS) $(load_static_elf_LDADD) $(LIBS)
send_static.elf$(EXEEXT): $(send_static_elf_OBJECTS) $(send_static_elf_DEPENDENCIES) 
	@rm -f send_static.elf$(EXEEXT)
	$(LINK) $(send_static_elf_OBJECTS) $(send_static_elf_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/elfloader-msp430.Po
include ./$(DEPDIR)/elfloader-x86.Po
include ./$(DEPDIR)/elfloader.Po
include ./$(DEPDIR)/elfstore-ram.Po
include ./$(DEPDIR)/flash.Po
include ./$(DEPDIR)/load_net.Po
include ./$(DEPDIR)/load_static.Po
include ./$(DEPDIR)/prog2load_buf.Po
include ./$(DEPDIR)/remake_com.Po
include ./$(DEPDIR)/send_static.Po
include ./$(DEPDIR)/symbols.Po
include ./$(DEPDIR)/symtab.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

elfloader.o: loader/elfloader.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT elfloader.o -MD -MP -MF $(DEPDIR)/elfloader.Tpo -c -o elfloader.o `test -f 'loader/elfloader.c' || echo '$(srcdir)/'`loader/elfloader.c
	mv -f $(DEPDIR)/elfloader.Tpo $(DEPDIR)/elfloader.Po
#	source='loader/elfloader.c' object='elfloader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o elfloader.o `test -f 'loader/elfloader.c' || echo '$(srcdir)/'`loader/elfloader.c

elfloader.obj: loader/elfloader.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT elfloader.obj -MD -MP -MF $(DEPDIR)/elfloader.Tpo -c -o elfloader.obj `if test -f 'loader/elfloader.c'; then $(CYGPATH_W) 'loader/elfloader.c'; else $(CYGPATH_W) '$(srcdir)/loader/elfloader.c'; fi`
	mv -f $(DEPDIR)/elfloader.Tpo $(DEPDIR)/elfloader.Po
#	source='loader/elfloader.c' object='elfloader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o elfloader.obj `if test -f 'loader/elfloader.c'; then $(CYGPATH_W) 'loader/elfloader.c'; else $(CYGPATH_W) '$(srcdir)/loader/elfloader.c'; fi`

elfloader-x86.o: loader/elfloader-x86.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT elfloader-x86.o -MD -MP -MF $(DEPDIR)/elfloader-x86.Tpo -c -o elfloader-x86.o `test -f 'loader/elfloader-x86.c' || echo '$(srcdir)/'`loader/elfloader-x86.c
	mv -f $(DEPDIR)/elfloader-x86.Tpo $(DEPDIR)/elfloader-x86.Po
#	source='loader/elfloader-x86.c' object='elfloader-x86.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o elfloader-x86.o `test -f 'loader/elfloader-x86.c' || echo '$(srcdir)/'`loader/elfloader-x86.c

elfloader-x86.obj: loader/elfloader-x86.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT elfloader-x86.obj -MD -MP -MF $(DEPDIR)/elfloader-x86.Tpo -c -o elfloader-x86.obj `if test -f 'loader/elfloader-x86.c'; then $(CYGPATH_W) 'loader/elfloader-x86.c'; else $(CYGPATH_W) '$(srcdir)/loader/elfloader-x86.c'; fi`
	mv -f $(DEPDIR)/elfloader-x86.Tpo $(DEPDIR)/elfloader-x86.Po
#	source='loader/elfloader-x86.c' object='elfloader-x86.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o elfloader-x86.obj `if test -f 'loader/elfloader-x86.c'; then $(CYGPATH_W) 'loader/elfloader-x86.c'; else $(CYGPATH_W) '$(srcdir)/loader/elfloader-x86.c'; fi`

symtab.o: loader/symtab.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT symtab.o -MD -MP -MF $(DEPDIR)/symtab.Tpo -c -o symtab.o `test -f 'loader/symtab.c' || echo '$(srcdir)/'`loader/symtab.c
	mv -f $(DEPDIR)/symtab.Tpo $(DEPDIR)/symtab.Po
#	source='loader/symtab.c' object='symtab.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o symtab.o `test -f 'loader/symtab.c' || echo '$(srcdir)/'`loader/symtab.c

symtab.obj: loader/symtab.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT symtab.obj -MD -MP -MF $(DEPDIR)/symtab.Tpo -c -o symtab.obj `if test -f 'loader/symtab.c'; then $(CYGPATH_W) 'loader/symtab.c'; else $(CYGPATH_W) '$(srcdir)/loader/symtab.c'; fi`
	mv -f $(DEPDIR)/symtab.Tpo $(DEPDIR)/symtab.Po
#	source='loader/symtab.c' object='symtab.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o symtab.obj `if test -f 'loader/symtab.c'; then $(CYGPATH_W) 'loader/symtab.c'; else $(CYGPATH_W) '$(srcdir)/loader/symtab.c'; fi`

elfstore-ram.o: elfstore/elfstore-ram.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT elfstore-ram.o -MD -MP -MF $(DEPDIR)/elfstore-ram.Tpo -c -o elfstore-ram.o `test -f 'elfstore/elfstore-ram.c' || echo '$(srcdir)/'`elfstore/elfstore-ram.c
	mv -f $(DEPDIR)/elfstore-ram.Tpo $(DEPDIR)/elfstore-ram.Po
#	source='elfstore/elfstore-ram.c' object='elfstore-ram.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o elfstore-ram.o `test -f 'elfstore/elfstore-ram.c' || echo '$(srcdir)/'`elfstore/elfstore-ram.c

elfstore-ram.obj: elfstore/elfstore-ram.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT elfstore-ram.obj -MD -MP -MF $(DEPDIR)/elfstore-ram.Tpo -c -o elfstore-ram.obj `if test -f 'elfstore/elfstore-ram.c'; then $(CYGPATH_W) 'elfstore/elfstore-ram.c'; else $(CYGPATH_W) '$(srcdir)/elfstore/elfstore-ram.c'; fi`
	mv -f $(DEPDIR)/elfstore-ram.Tpo $(DEPDIR)/elfstore-ram.Po
#	source='elfstore/elfstore-ram.c' object='elfstore-ram.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o elfstore-ram.obj `if test -f 'elfstore/elfstore-ram.c'; then $(CYGPATH_W) 'elfstore/elfstore-ram.c'; else $(CYGPATH_W) '$(srcdir)/elfstore/elfstore-ram.c'; fi`

elfloader-msp430.o: loader/elfloader-msp430.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT elfloader-msp430.o -MD -MP -MF $(DEPDIR)/elfloader-msp430.Tpo -c -o elfloader-msp430.o `test -f 'loader/elfloader-msp430.c' || echo '$(srcdir)/'`loader/elfloader-msp430.c
	mv -f $(DEPDIR)/elfloader-msp430.Tpo $(DEPDIR)/elfloader-msp430.Po
#	source='loader/elfloader-msp430.c' object='elfloader-msp430.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o elfloader-msp430.o `test -f 'loader/elfloader-msp430.c' || echo '$(srcdir)/'`loader/elfloader-msp430.c

elfloader-msp430.obj: loader/elfloader-msp430.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT elfloader-msp430.obj -MD -MP -MF $(DEPDIR)/elfloader-msp430.Tpo -c -o elfloader-msp430.obj `if test -f 'loader/elfloader-msp430.c'; then $(CYGPATH_W) 'loader/elfloader-msp430.c'; else $(CYGPATH_W) '$(srcdir)/loader/elfloader-msp430.c'; fi`
	mv -f $(DEPDIR)/elfloader-msp430.Tpo $(DEPDIR)/elfloader-msp430.Po
#	source='loader/elfloader-msp430.c' object='elfloader-msp430.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o elfloader-msp430.obj `if test -f 'loader/elfloader-msp430.c'; then $(CYGPATH_W) 'loader/elfloader-msp430.c'; else $(CYGPATH_W) '$(srcdir)/loader/elfloader-msp430.c'; fi`

flash.o: dev/flash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT flash.o -MD -MP -MF $(DEPDIR)/flash.Tpo -c -o flash.o `test -f 'dev/flash.c' || echo '$(srcdir)/'`dev/flash.c
	mv -f $(DEPDIR)/flash.Tpo $(DEPDIR)/flash.Po
#	source='dev/flash.c' object='flash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o flash.o `test -f 'dev/flash.c' || echo '$(srcdir)/'`dev/flash.c

flash.obj: dev/flash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT flash.obj -MD -MP -MF $(DEPDIR)/flash.Tpo -c -o flash.obj `if test -f 'dev/flash.c'; then $(CYGPATH_W) 'dev/flash.c'; else $(CYGPATH_W) '$(srcdir)/dev/flash.c'; fi`
	mv -f $(DEPDIR)/flash.Tpo $(DEPDIR)/flash.Po
#	source='dev/flash.c' object='flash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o flash.obj `if test -f 'dev/flash.c'; then $(CYGPATH_W) 'dev/flash.c'; else $(CYGPATH_W) '$(srcdir)/dev/flash.c'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#clean: clean-am

clean-am: clean-generic clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-noinstPROGRAMS ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am


#.PHONY: symbols.c prog2load_buf.c prog2load_buf.h remake_com.c
#symbols.c:
#	@echo Generating symbols....
#	generate_symbols $(CORE)
#prog2load_buf.c: prog2load_buf.h prog2load.o
#	@echo Generating static ELF source code...
#	strip --strip-unneeded prog2load.o
#	binary2buffer prog2load.o > prog2load_buf.c
#prog2load_buf.h: prog2load.o
#	strip --strip-unneeded prog2load.o
#	binary2buffer_h prog2load.o > prog2load_buf.h

.PHONY: symbols.c prog2load_buf.c prog2load_buf.h remake_com.c
symbols.c:
	@echo Generating symbols....
	generate_symbols $(CORE)
prog2load_buf.c: prog2load_buf.h prog2load.o
	@echo Generating static ELF source code...
	msp430-strip --strip-unneeded prog2load.o
	binary2buffer prog2load.o > prog2load_buf.c
prog2load_buf.h: prog2load.o
	msp430-strip --strip-unneeded prog2load.o
	binary2buffer_h prog2load.o > prog2load_buf.h

remake_com.c:
	(cd ../../../src/mos/com && make clean && make DEFS=-DUSING_ELF)
	touch remake_com.c

all: $(BUILT_APPS) $(BUILT_APPS:.elf=.srec)

clean:
	rm -rf *.srec *.elf *.o

#%.srec: %.elf
#	avr-objcopy --output-target=srec $^ $@

%.srec: %.elf
	msp430-objcopy --output-target=srec $^ $@

#%.srec: %.elf
#	mb-objcopy --output-target=srec $^ $@

#kernel:
#	make -C $(top_builddir)/src/mos

#    #    make -C $(nodeblaze_dir) -f system.make bits

#download.cmd: $(BUILT_APPS)
#	echo "setMode -bscan" >> $@
#	echo "setCable -p auto" >> $@
#	echo "identify" >> $@
#	echo "assignfile -p 3 -file download.bit" >> $@
#	echo "program -p 3" >> $@
#	echo "quit" >> $@
#	echo "" >> $@

#build: kernel $(BUILT_APPS)

#debug: kernel $(BUILT_APPS)
#	mb-gdb --command=./gdb_cmd $(THIS_ELF)

#load: kernel $(BUILT_APPS) download.cmd
#	bitinit $(nodeblaze_dir)/system.mhs -lp $(platlib_dir) -pe microblaze_0 $(THIS_ELF) -bt $(nodeblaze_dir)/implementation/system.bit -bm $(nodeblaze_dir)/implementation/system_bd.bmm -o download.bit
#	data2mem -bm $(nodeblaze_dir)/implementation/system_bd -bt $(nodeblaze_dir)/implementation/system.bit  -bd $(THIS_ELF) tag microblaze_0  -o b download.bit
#	impact -batch download.cmd
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
